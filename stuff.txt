test: outline remains constant

move projection matrix in vertex shader to render outlines in front (use gl_front_facing)

use CIELAB colour space (perceptually uniform) to find colours; assume sRGB
-- ignore L (lightness) for now, since we're creating shades of those anyway; this makes the maths a bit easier
-- use oct/quadtree method? Or just median cut?

After finding palette, create 512x512 texture, using ((R << 1) & 0x01F8) | ((B >> 1) & 0x07), ((G << 1) & 0x01F8) | (B >> 5)
   as texture coordinates to look up colour (lose accuracy in low bits, but this is generally fine since the colour regions in
   the lookup image will be pretty large). The lookup can be done in sRGB colour space, since we can precompute the texture in
   CIELAB colour space to save having to convert between colour spaces in the shader.

Instead of computing the colour space conversion each time, create two textures similar to the above to do the conversion?

Outline options:
-- use surface normal; surface is an edge if normal is perpendicular to screen (doesn't give good results, since non-smooth
   polygons give non-uniform outlines)
-- polygon offset to offset back facing polygons forwards (gives artifacts)
-- depth/normal buffer edge detection (could be fun; not sure how to get 1-pixel outlines)
-- use vertex normals to push vertices of front-facing polygons back exactly enough that one pixel's worth of the back facing
   polygon is drawn over the top (more specific version of polygon offset strategy)

Detail preservation: add extra data to model (figure out some algorithm to compute this) that gives the size of the feature each
   vertex is part of; then, in vertex shader, extrude vertex along normal if the screen space feature size is too small

Possible method to find feature size - line through each polygon in opposite direction to polygon normal, find distance to first
   polygon that it intersects with (might have to somehow account for only needing to stretch in screen x/y?)

maybe scratch using WebGL to get more GLSL functions (geometry shader might be important)