{{#templateProperties.author}}
/** @author({{templateProperties.author}}) */
{{/templateProperties.author}}

{{#licenses}}
{{{.}}}
{{/licenses}}

goog.provide('{{namespace}}.{{className}}');
{{#superClass}}
goog.require('{{namespace}}.{{superClass}}');
{{/superClass}}
{{#jsRequires}}
goog.require('{{.}}');
{{/jsRequires}}

/**
 * Autogenerated class for {{className}}.
 * @constructor
 */
{{namespace}}.{{className}} = function(){};

/**
 * Constants declared in JavaScript to be used by Shaders.
 * @type {string}
 * @const
 */
{{namespace}}.{{className}}.JS_CONST =
{{#jsConsts}}
  '#define ' + (goog.DEBUG ? '{{originalName}}' : '{{shortName}}') + ' ' +
  ({{expression}}) + '\n' +
{{/jsConsts}}
  '';


/**
 * The original vertex source code.
 * @type {string}
 * @const
 */
{{namespace}}.{{className}}.DEBUG_VERTEX_SOURCE =
    '{{{getOriginalVertexSource}}}';


/**
 * The optimized vertex source code.
 * @type {string}
 * @const
 */
{{namespace}}.{{className}}.OPTIMIZED_VERTEX_SOURCE =
    '{{{getVertexSource}}}';


/**
 * The vertex source code.
 * @type {string}
 * @const
 */
{{namespace}}.{{className}}.VERTEX_SOURCE =
    {{namespace}}.{{className}}.JS_CONST +
        (goog.DEBUG ? {{namespace}}.{{className}}.DEBUG_VERTEX_SOURCE :
                      {{namespace}}.{{className}}.OPTIMIZED_VERTEX_SOURCE);

/**
 * The original vertex source code.
 * @type {string}
 * @const
 */
{{namespace}}.{{className}}.DEBUG_FRAGMENT_SOURCE =
    '{{{getOriginalFragmentSource}}}';


/**
 * The optimized vertex source code.
 * @type {string}
 * @const
 */
{{namespace}}.{{className}}.OPTIMIZED_FRAGMENT_SOURCE =
    '{{{getFragmentSource}}}';


/**
 * The fragment source code.
 * @type {string}
 * @const
 */
{{namespace}}.{{className}}.FRAGMENT_SOURCE =
        {{namespace}}.{{className}}.JS_CONST +
        (goog.DEBUG ? {{namespace}}.{{className}}.DEBUG_FRAGMENT_SOURCE :
                      {{namespace}}.{{className}}.OPTIMIZED_FRAGMENT_SOURCE);


/**
 * Map of uniform original name to its minified name.
 * @type {Object.<string, string>}
 * @const
 */
{{namespace}}.{{className}}.uniform = function() {};
{{#getUniforms}}

/**
 * Short name for uniform {{originalName}}
 * @type {string}
 * @const
 */
{{namespace}}.{{className}}.uniform.{{originalName}} = goog.DEBUG ?
    '{{originalName}}' : '{{shortName}}';
{{/getUniforms}}


/**
 * Map of attribute original name to its minified name.
 * @type {Object.<string, string>}
 * @const
 */
{{namespace}}.{{className}}.attribute = function() {};
{{#getAttributes}}

/**
 * Short name for attribute {{originalName}}
 * @type {string}
 * @const
 */
{{namespace}}.{{className}}.attribute.{{originalName}} = goog.DEBUG ?
    '{{originalName}}' : '{{shortName}}';
{{/getAttributes}}
